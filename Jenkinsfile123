pipeline {
    agent any 

    tools {
        maven 'maven' // Define the Maven tool
    }
    
    environment {
        SCANNER_HOME = tool 'sonarqube-01' // Define SonarQube scanner tool
        SONAR_TOKEN = credentials('sonar-qube') // Token for SonarQube authentication
        DOCKER_IMAGE = 'aero1602/maven-application' // Docker image name
        DOCKER_TAG = "${env.BUILD_NUMBER}-${env.GIT_COMMIT}" // Docker image tag
        AWS_REGION = 'ap-south-1' // AWS region for ECR
        ECR_REPOSITORY = '905418475780.dkr.ecr.ap-south-1.amazonaws.com/devsecops/maven' // ECR repository URL
        EMAIL_RECIPIENTS = 'arangarajan16.002@gmail.com' // Define your email recipients here
        SLACK_CHANNEL = '#alert' // Define your Slack channel here
        SLACK_CREDENTIALS_ID = 'slack-webhook' // Jenkins credentials ID for Slack
    }
    
    stages {
        stage("Git Checkout") {
            steps {
                git branch: 'main', changelog: false, poll: false, url: 'https://github.com/Arangarajan-Aero/Petclinic-maven-sonar-basics.git'
            }
        }
        
        stage("Compile") {
            steps {
                sh "mvn clean compile" // Compile the application
            }
        }
        
        stage("Test Cases") {
            steps {
                sh "mvn test" // Run tests
            }
        }
        
        stage("Sonarqube Analysis") {
            steps {
                withSonarQubeEnv('sonar-qube') {
                    sh '''$SCANNER_HOME/bin/sonar-scanner -Dsonar.projectName=devsecop \
                    -Dsonar.java.binaries=. \
                    -Dsonar.projectKey=devsecop \
                    -Dsonar.coverage.exclusions=**/test/** \
                    -Dsonar.coverage.minimumCoverage=80 \
                    -Dsonar.security.hotspots=true \
                    -Dsonar.issue.severity=HIGH
                    '''
                }
            }
        }
             stage("Quality Gate") {
            steps {
                script {
                    timeout(time: 60, unit: 'MINUTES') {
                        def qg = waitForQualityGate()
                        if (qg.status != 'OK') {
                            error "Pipeline aborted due to quality gate failure: ${qg.status}"
                        }
                    }
                }
            }
        }
        stage("OWASP Dependency Check") {
            steps {
                dependencyCheck additionalArguments: '--scan ./ --format ALL', 
                                odcInstallation: 'dp-check', 
                                stopBuild: true  
                dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
            }
        }

   

        stage("Build") {
            steps {
                sh "mvn clean install" // Build the application
            }
        }
        
        stage("Dockerfile Linting with Hadolint") {
            steps {
                script {
                    if (fileExists('Dockerfile')) {
                        echo 'Dockerfile found, running Hadolint...'
                        sh """
                            docker run --rm -v \$(pwd):/workspace hadolint/hadolint hadolint /workspace/Dockerfile > hadolint_report.txt || echo 'Hadolint encountered issues, see hadolint_report.txt.'
                        """
                        archiveArtifacts artifacts: 'hadolint_report.txt', allowEmptyArchive: true // Archive Hadolint report
                    } else {
                        echo 'No Dockerfile found. Skipping Hadolint linting stage.'
                    }
                }
            }
        }

        stage("Build Docker Image") {
            steps {
                script {
                    sh "docker build -t ${DOCKER_IMAGE}:${DOCKER_TAG} ." // Build Docker image
                    echo "Docker image built successfully"
                }
            }
        }

          stage('Docker Image Vulnerability Scanning') {
            steps {
                script {
                    sh 'trivy image --severity HIGH,CRITICAL --format table ${DOCKER_IMAGE}:${DOCKER_TAG} > trivy-report.txt'
                    sh 'libreoffice --headless --convert-to pdf trivy-report.txt --outdir .'
                    archiveArtifacts artifacts: 'trivy-report.pdf', allowEmptyArchive: false
                }
            }
        }

        stage("Push to ECR") {
            steps {
                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aces-key']]) {
                    script {
                        // Login to ECR
                        sh "aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${ECR_REPOSITORY}"
                        
                        // Tag the Docker image for ECR
                        sh "docker tag ${DOCKER_IMAGE}:${DOCKER_TAG} ${ECR_REPOSITORY}:${DOCKER_TAG}"
                        
                        // Push the Docker image to ECR
                        sh "docker push ${ECR_REPOSITORY}:${DOCKER_TAG}"
                        echo "Docker image ${DOCKER_IMAGE}:${DOCKER_TAG} pushed to ECR successfully"
                    }
                }
            }
        }
    } 

    post {
        always {
            script {
                // Define email content
                def subject = "Build #${env.BUILD_NUMBER} - ${currentBuild.currentResult}"
                def body = """
                <p>Build Status: ${currentBuild.currentResult}</p>
                <p>Commit ID: ${env.GIT_COMMIT}</p>
                <p>Build Link: <a href="${env.BUILD_URL}">${env.BUILD_URL}</a></p>
                <p>Triggered By: ${env.BUILD_USER}</p>
                <p>Reports:</p>
                <ul>
                    <li><a href="${env.BUILD_URL}artifact/hadolint_report.txt">Hadolint Report</a></li>
                    <li><a href="${env.BUILD_URL}artifact/trivy_report.pdf">Trivy Report</a></li>
                    <li><a href="${env.BUILD_URL}artifact/dependency-check-report.xml">OWASP Dependency Check Report</a></li>
                </ul>
                """

                // Send email notification
                emailext(
                    to: EMAIL_RECIPIENTS,
                    subject: subject,
                    body: body,
                    mimeType: 'text/html'
                )

                // Send Slack notification
                slackSend(channel: SLACK_CHANNEL, 
                          message: "Build *#${env.BUILD_NUMBER}* - ${currentBuild.currentResult} \n" +
                                   "Commit ID: `${env.GIT_COMMIT}` \n" +
                                   "Build Link: <${env.BUILD_URL}|Click here> \n" +
                                   "Triggered By: ${env.BUILD_USER}", 
                          credentialsId: SLACK_CREDENTIALS_ID)
            }
        }
    }
